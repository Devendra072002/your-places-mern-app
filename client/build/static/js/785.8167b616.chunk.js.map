{"version":3,"file":"static/js/785.8167b616.chunk.js","mappings":"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","sources":["shared/components/FormElements/ImageUpload.js","shared/components/FormElements/Input.js","shared/components/UIElements/Card.js","shared/hooks/form-hook.js","shared/util/validators.js","../node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","user/pages/Auth.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\n\r\nimport Button from \"./Button\";\r\nimport \"./ImageUpload.css\";\r\n\r\nconst ImageUpload = (props) => {\r\n  const [file, setFile] = useState();\r\n  const [previewUrl, setPreviewUrl] = useState();\r\n  const [isValid, setIsValid] = useState(false);\r\n\r\n  const filePickerRef = useRef();\r\n\r\n  useEffect(() => {\r\n    if (!file) {\r\n      return;\r\n    }\r\n    const fileReader = new FileReader();\r\n    fileReader.onload = () => {\r\n      setPreviewUrl(fileReader.result);\r\n    };\r\n    fileReader.readAsDataURL(file);\r\n  }, [file]);\r\n\r\n  const pickedHandler = (event) => {\r\n    let pickedFile;\r\n    let fileIsValid = isValid;\r\n    if (event.target.files && event.target.files.length === 1) {\r\n      pickedFile = event.target.files[0];\r\n      setFile(pickedFile);\r\n      setIsValid(true);\r\n      fileIsValid = true;\r\n    } else {\r\n      setIsValid(false);\r\n      fileIsValid = false;\r\n    }\r\n    props.onInput(props.id, pickedFile, fileIsValid);\r\n  };\r\n\r\n  const pickImageHandler = () => {\r\n    filePickerRef.current.click();\r\n  };\r\n\r\n  return (\r\n    <div className=\"form-control\">\r\n      <input\r\n        type=\"file\"\r\n        ref={filePickerRef}\r\n        style={{ display: \"none\" }}\r\n        id={props.id}\r\n        accept=\".jpg,.png,.jpeg\"\r\n        onChange={pickedHandler}\r\n      />\r\n      <div className={`image-upload ${props.center && \"center\"}`}>\r\n        <div className=\"image-upload__preview\">\r\n          {previewUrl && <img src={previewUrl} alt=\"Preview\" />}\r\n          {!previewUrl && <p>Please pick an image</p>}\r\n        </div>\r\n        <Button type=\"button\" onClick={pickImageHandler}>\r\n          PICK IMAGE\r\n        </Button>\r\n      </div>\r\n      {!isValid && <p>{props.errorText}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ImageUpload;\r\n","import React, { useReducer, useEffect } from \"react\";\r\n\r\nimport { validate } from \"../../util/validators\";\r\nimport \"./Input.css\";\r\n\r\n//useReducer for connected states or more complex states\r\n\r\nconst inputReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"CHANGE\":\r\n      return {\r\n        ...state,\r\n        value: action.val,\r\n        isValid: validate(action.val, action.validators),\r\n      };\r\n    case \"TOUCH\": {\r\n      return {\r\n        ...state,\r\n        isTouched: true,\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst Input = (props) => {\r\n  const [inputState, dispatch] = useReducer(inputReducer, {\r\n    value: props.initialValue || \"\",\r\n    isTouched: false,\r\n    isValid: props.initialValid || false,\r\n  });\r\n\r\n  const { id, onInput } = props;\r\n  const { value, isValid } = inputState;\r\n\r\n  useEffect(() => {\r\n    onInput(id, value, isValid);\r\n  }, [id, value, isValid, onInput]);\r\n\r\n  const changeHandler = (event) => {\r\n    dispatch({\r\n      type: \"CHANGE\",\r\n      val: event.target.value,\r\n      validators: props.validators,\r\n    });\r\n  };\r\n  const touchHandler = () => {\r\n    dispatch({\r\n      type: \"TOUCH\",\r\n    });\r\n  };\r\n  const element =\r\n    props.element === \"input\" ? (\r\n      <input\r\n        id={props.id}\r\n        type={props.type}\r\n        placeholder={props.placeholder}\r\n        onChange={changeHandler}\r\n        onBlur={touchHandler}\r\n        value={inputState.value}\r\n      />\r\n    ) : (\r\n      <textarea\r\n        id={props.id}\r\n        rows={props.rows || 3}\r\n        // cols={props.cols || 3}\r\n        onChange={changeHandler}\r\n        onBlur={touchHandler}\r\n        value={inputState.value}\r\n      ></textarea>\r\n    );\r\n\r\n  return (\r\n    <div\r\n      className={`form-control ${\r\n        !inputState.isValid && inputState.isTouched && \"form-control--invalid\"\r\n      }`}\r\n    >\r\n      <label htmlFor={props.id}>{props.label}</label>\r\n      {element}\r\n      {!inputState.isValid && inputState.isTouched && <p>{props.errorText}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Input;\r\n","import React from 'react';\n\nimport './Card.css';\n\nconst Card = props => {\n  return (\n    <div className={`card ${props.className}`} style={props.style}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Card;\n","import { useCallback, useReducer } from \"react\";\r\n\r\nconst formReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"INPUT_CHANGE\":\r\n      let formIsValid = true;\r\n      for (const inputId in state.inputs) {\r\n        if (!state.inputs[inputId]) {\r\n          continue;\r\n        }\r\n        if (inputId === action.inputId) {\r\n          formIsValid = formIsValid && action.isValid;\r\n        } else {\r\n          formIsValid = formIsValid && state.inputs[inputId].isValid;\r\n        }\r\n      }\r\n      return {\r\n        ...state,\r\n        inputs: {\r\n          ...state.inputs,\r\n          [action.inputId]: { value: action.value, isValid: action.isValid },\r\n        },\r\n        isValid: formIsValid,\r\n      };\r\n    case \"SET_DATA\":\r\n      return {\r\n        inputs: action.inputs,\r\n        isValid: action.formIsValid,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const useForm = (initialInputs, initialFormValidity) => {\r\n  const [formState, dispatch] = useReducer(formReducer, {\r\n    inputs: initialInputs,\r\n    isValid: initialFormValidity,\r\n  });\r\n\r\n  const inputHandler = useCallback((id, value, isValid) => {\r\n    dispatch({ type: \"INPUT_CHANGE\", value: value, isValid, inputId: id });\r\n  }, []);\r\n\r\n  const setFormData = useCallback((inputData, formValidity) => {\r\n    dispatch({\r\n      type: \"SET_DATA\",\r\n      inputs: inputData,\r\n      formIsValid: formValidity,\r\n    });\r\n  }, []);\r\n\r\n  return [formState, inputHandler, setFormData];\r\n};\r\n","const VALIDATOR_TYPE_REQUIRE = \"REQUIRE\";\r\nconst VALIDATOR_TYPE_MINLENGTH = \"MINLENGTH\";\r\nconst VALIDATOR_TYPE_MAXLENGTH = \"MAXLENGTH\";\r\nconst VALIDATOR_TYPE_MIN = \"MIN\";\r\nconst VALIDATOR_TYPE_MAX = \"MAX\";\r\nconst VALIDATOR_TYPE_EMAIL = \"EMAIL\";\r\nconst VALIDATOR_TYPE_FILE = \"FILE\";\r\n\r\nexport const VALIDATOR_REQUIRE = () => ({ type: VALIDATOR_TYPE_REQUIRE });\r\nexport const VALIDATOR_FILE = () => ({ type: VALIDATOR_TYPE_FILE });\r\nexport const VALIDATOR_MINLENGTH = (val) => ({\r\n  type: VALIDATOR_TYPE_MINLENGTH,\r\n  val: val,\r\n});\r\nexport const VALIDATOR_MAXLENGTH = (val) => ({\r\n  type: VALIDATOR_TYPE_MAXLENGTH,\r\n  val: val,\r\n});\r\nexport const VALIDATOR_MIN = (val) => ({ type: VALIDATOR_TYPE_MIN, val: val });\r\nexport const VALIDATOR_MAX = (val) => ({ type: VALIDATOR_TYPE_MAX, val: val });\r\nexport const VALIDATOR_EMAIL = () => ({ type: VALIDATOR_TYPE_EMAIL });\r\n\r\nexport const validate = (value, validators) => {\r\n  let isValid = true;\r\n  for (const validator of validators) {\r\n    if (validator.type === VALIDATOR_TYPE_REQUIRE) {\r\n      isValid = isValid && value.trim().length > 0;\r\n    }\r\n    if (validator.type === VALIDATOR_TYPE_MINLENGTH) {\r\n      isValid = isValid && value.trim().length >= validator.val;\r\n    }\r\n    if (validator.type === VALIDATOR_TYPE_MAXLENGTH) {\r\n      isValid = isValid && value.trim().length <= validator.val;\r\n    }\r\n    if (validator.type === VALIDATOR_TYPE_MIN) {\r\n      isValid = isValid && +value >= validator.val;\r\n    }\r\n    if (validator.type === VALIDATOR_TYPE_MAX) {\r\n      isValid = isValid && +value <= validator.val;\r\n    }\r\n    if (validator.type === VALIDATOR_TYPE_EMAIL) {\r\n      isValid = isValid && /^\\S+@\\S+\\.\\S+$/.test(value);\r\n    }\r\n  }\r\n  return isValid;\r\n};\r\n","import unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (!it) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      var F = function F() {};\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var normalCompletion = true,\n    didErr = false,\n    err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","import React, { useState, useContext } from \"react\";\r\n\r\nimport Button from \"../../shared/components/FormElements/Button\";\r\nimport Input from \"../../shared/components/FormElements/Input\";\r\nimport Card from \"../../shared/components/UIElements/Card\";\r\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\r\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\r\nimport ImageUpload from \"../../shared/components/FormElements/ImageUpload\";\r\nimport {\r\n  VALIDATOR_EMAIL,\r\n  VALIDATOR_MINLENGTH,\r\n  VALIDATOR_REQUIRE,\r\n} from \"../../shared/util/validators\";\r\nimport { useForm } from \"../../shared/hooks/form-hook\";\r\nimport { AuthContext } from \"../../shared/context/auth-context\";\r\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\r\n\r\nimport \"./Auth.css\";\r\n\r\nconst Auth = () => {\r\n  const auth = useContext(AuthContext);\r\n  const [isLoginMode, setIsLoginMode] = useState(true);\r\n\r\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n\r\n  const [formState, inputHandler, setFormData] = useForm(\r\n    {\r\n      email: {\r\n        value: \"\",\r\n        isValid: false,\r\n      },\r\n      password: {\r\n        value: \"\",\r\n        isValid: false,\r\n      },\r\n    },\r\n    false\r\n  );\r\n\r\n  const switchModeHandler = () => {\r\n    if (!isLoginMode) {\r\n      setFormData(\r\n        {\r\n          ...formState.inputs,\r\n          name: undefined,\r\n          image: undefined,\r\n        },\r\n        formState.inputs.email.isValid && formState.inputs.password.isValid\r\n      );\r\n    } else {\r\n      setFormData(\r\n        {\r\n          ...formState.inputs,\r\n          name: {\r\n            value: \"\",\r\n            isValid: false,\r\n          },\r\n          image: { value: null, isValid: false },\r\n        },\r\n        false\r\n      );\r\n    }\r\n\r\n    setIsLoginMode((prevMode) => !prevMode);\r\n  };\r\n\r\n  const authSubmitHandler = async (event) => {\r\n    event.preventDefault();\r\n    if (isLoginMode) {\r\n      try {\r\n        const responseData = await sendRequest(\r\n          process.env.REACT_APP_BACKEND_URL + \"/users/login\",\r\n          \"POST\",\r\n          JSON.stringify({\r\n            email: formState.inputs.email.value,\r\n            password: formState.inputs.password.value,\r\n          }),\r\n          {\r\n            \"Content-Type\": \"application/json\",\r\n          }\r\n        );\r\n        auth.login(responseData.userId, responseData.token);\r\n      } catch (err) {}\r\n    } else {\r\n      try {\r\n        const formData = new FormData();\r\n        formData.append(\"email\", formState.inputs.email.value);\r\n        formData.append(\"name\", formState.inputs.name.value);\r\n        formData.append(\"password\", formState.inputs.password.value);\r\n        formData.append(\"image\", formState.inputs.image.value);\r\n\r\n        const responseData = await sendRequest(\r\n          process.env.REACT_APP_BACKEND_URL + \"/users/signup\",\r\n          \"POST\",\r\n          formData\r\n        );\r\n\r\n        auth.login(responseData.userId, responseData.token);\r\n      } catch (err) {}\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ErrorModal error={error} onClear={clearError} />\r\n      <Card className=\"authentication\">\r\n        {isLoading && <LoadingSpinner asOverlay />}\r\n        <h2>Login Required</h2>\r\n        <hr />\r\n        <form onSubmit={authSubmitHandler}>\r\n          {!isLoginMode && (\r\n            <Input\r\n              element=\"input\"\r\n              id=\"name\"\r\n              type=\"text\"\r\n              label=\"Your Name\"\r\n              validators={[VALIDATOR_REQUIRE()]}\r\n              errorText=\"Please enter a name.\"\r\n              onInput={inputHandler}\r\n            ></Input>\r\n          )}\r\n          {!isLoginMode && (\r\n            <ImageUpload\r\n              id=\"image\"\r\n              center\r\n              onInput={inputHandler}\r\n              errorText=\"Please provide an image.\"\r\n            />\r\n          )}\r\n          <Input\r\n            element=\"input\"\r\n            id=\"email\"\r\n            type=\"email\"\r\n            label=\"E-Mail\"\r\n            validators={[VALIDATOR_EMAIL()]}\r\n            errorText=\"Please enter a valid email address.\"\r\n            onInput={inputHandler}\r\n          ></Input>\r\n          <Input\r\n            element=\"input\"\r\n            id=\"password\"\r\n            type=\"password\"\r\n            label=\"Password\"\r\n            validators={[VALIDATOR_MINLENGTH(6)]}\r\n            errorText=\"Please enter a valid password, at least 6 characters.\"\r\n            onInput={inputHandler}\r\n          ></Input>\r\n          <Button type=\"Submit\" disabled={!formState.isValid}>\r\n            {isLoginMode ? \"LOGIN\" : \"SIGNUP\"}\r\n          </Button>\r\n        </form>\r\n        <Button inverse onClick={switchModeHandler}>\r\n          SWITCH TO {isLoginMode ? \"SIGNUP\" : \"LOGIN\"}\r\n        </Button>\r\n      </Card>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Auth;\r\n"],"names":["props","useState","file","setFile","previewUrl","setPreviewUrl","isValid","setIsValid","filePickerRef","useRef","useEffect","fileReader","FileReader","onload","result","readAsDataURL","className","type","ref","style","display","id","accept","onChange","event","pickedFile","fileIsValid","target","files","length","onInput","center","src","alt","Button","onClick","current","click","errorText","inputReducer","state","action","value","val","validate","validators","isTouched","useReducer","initialValue","initialValid","inputState","dispatch","changeHandler","touchHandler","element","placeholder","onBlur","rows","htmlFor","label","children","formReducer","formIsValid","inputId","inputs","useForm","initialInputs","initialFormValidity","formState","useCallback","inputData","formValidity","VALIDATOR_TYPE_REQUIRE","VALIDATOR_TYPE_MINLENGTH","VALIDATOR_TYPE_MAXLENGTH","VALIDATOR_TYPE_EMAIL","VALIDATOR_REQUIRE","VALIDATOR_MINLENGTH","VALIDATOR_EMAIL","o","allowArrayLike","it","Symbol","iterator","Array","isArray","unsupportedIterableToArray","i","F","s","n","done","e","_e","f","TypeError","err","normalCompletion","didErr","call","step","next","_e2","validator","trim","test","auth","useContext","AuthContext","isLoginMode","setIsLoginMode","useHttpClient","isLoading","error","sendRequest","clearError","email","password","inputHandler","setFormData","authSubmitHandler","preventDefault","process","JSON","stringify","responseData","login","userId","token","formData","FormData","append","name","image","ErrorModal","onClear","Card","LoadingSpinner","asOverlay","onSubmit","Input","ImageUpload","disabled","inverse","undefined","prevMode"],"sourceRoot":""}